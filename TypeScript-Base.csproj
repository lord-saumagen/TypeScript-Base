<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)\TypeScript\Microsoft.TypeScript.Default.props" Condition="Exists('$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)\TypeScript\Microsoft.TypeScript.Default.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <ProjectGuid>{4043E5DB-25B0-4830-BCF3-70818D8B2213}</ProjectGuid>
    <ProjectTypeGuids>{349c5851-65df-11da-9384-00065b846f21};{fae04ec0-301f-11d3-bf4b-00c04f79efbc}</ProjectTypeGuids>
    <OutputType>Library</OutputType>
    <OutputPath>bin</OutputPath>
    <TargetFrameworkVersion>v4.5.2</TargetFrameworkVersion>
    <DebugType>full</DebugType>
    <DebugSymbols>true</DebugSymbols>
    <TypeScriptToolsVersion>2.2</TypeScriptToolsVersion>
    <UseIISExpress>true</UseIISExpress>
    <IISExpressSSLPort />
    <IISExpressAnonymousAuthentication />
    <IISExpressWindowsAuthentication />
    <IISExpressUseClassicPipelineMode />
    <UseGlobalApplicationHostFile />
  </PropertyGroup>
  <ItemGroup>
    <Service Include="{4A0DDDB5-7A95-4FBF-97CC-616D07737A77}" />
  </ItemGroup>
  <ItemGroup>
    <TypeScriptCompile Include="Encoding\Base64.ts" />
    <TypeScriptCompile Include="Encoding\UTF.ts" />
    <TypeScriptCompile Include="Exception\Exception.ts" />
    <TypeScriptCompile Include="IO\BitStringStream.ts" />
    <TypeScriptCompile Include="IO\ByteStream.ts" />
    <TypeScriptCompile Include="IO\IStream.ts" />
    <TypeScriptCompile Include="IO\Stream.ts" />
    <TypeScriptCompile Include="IO\StreamStateEnum.ts" />
    <TypeScriptCompile Include="TypeCode\GUID.ts" />
    <TypeScriptCompile Include="TypeCode\UInt64.ts" />
    <TypeScriptCompile Include="Utils\Assert.ts" />
    <TypeScriptCompile Include="Utils\HTTPStatusCodes.ts" />
    <TypeScriptCompile Include="Utils\TypeGuards.ts" />
    <TypeScriptCompile Include="Utils\Utils.ts" />
    <TypeScriptCompile Include="_references.ts" />
  </ItemGroup>
  <ItemGroup>
    <Content Include="PostBuild.txt" />
    <Content Include="README.md" />
  </ItemGroup>
  <PropertyGroup>
    <VisualStudioVersion Condition="'$(VisualStudioVersion)' == ''">12.0</VisualStudioVersion>
  </PropertyGroup>
  <PropertyGroup>
    <RootNamespace>TS_Base</RootNamespace>
  </PropertyGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <Import Project="$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)\WebApplications\Microsoft.WebApplication.targets" Condition="Exists('$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)\WebApplications\Microsoft.WebApplication.targets')" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{349c5851-65df-11da-9384-00065b846f21}">
        <WebProjectProperties>
          <UseIIS>True</UseIIS>
          <AutoAssignPort>True</AutoAssignPort>
          <DevelopmentServerPort>58512</DevelopmentServerPort>
          <DevelopmentServerVPath>/</DevelopmentServerVPath>
          <IISUrl>http://localhost:58512/</IISUrl>
          <NTLMAuthentication>False</NTLMAuthentication>
          <UseCustomServer>False</UseCustomServer>
          <CustomServerUrl>
          </CustomServerUrl>
          <SaveServerSettingsInUserFile>False</SaveServerSettingsInUserFile>
        </WebProjectProperties>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
  <PropertyGroup Condition="'$(Configuration)' == 'Debug'">
    <!-- 
    type: boolean, 
    default: false, 
    description: Generates corresponding ‘.d.ts’ file. 
    -->
    <TypeScriptGeneratesDeclarations>True</TypeScriptGeneratesDeclarations>
    <!-- 
    type: string, 
    default: (target === "ES6" ? "ES6" : "CommonJS"), 
    description: Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es6', or 'es2015'.
    * Only 'amd' and 'system' can be used in conjunction with __outFile.
    * 'es6' and 'es2015' values may not be used when targeting ES5 or lower. 
    -->
    <TypeScriptModuleKind>None</TypeScriptModuleKind>
    <!-- 
    type: string, 
    default: "ES5", 
    description: Specify ECMAScript target version: 'es3' (default), 'es5', or 'es6'.
    -->
    <TypeScriptTarget>ES6</TypeScriptTarget>
    <!-- 
    type: string, 
    default: "utf8", 
    description: The character set of the input files. 
    -->
    <TypeScriptCharset>UTF8</TypeScriptCharset>
    <!-- 
    type: boolean, 
    default: false, 
    description:  Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files.
    -->
    <TypeScriptEmitBOM>False</TypeScriptEmitBOM>
    <!-- 
    type: boolean, 
    default: false, 
    description: Emit design-type metadata for decorated declarations in source. See issue #2577 for details. 
    -->
    <TypeScriptEmitDecoratorMetadata>False</TypeScriptEmitDecoratorMetadata>
    <!-- 
    type: boolean, 
    default: false, 
    description: Enables experimental support for ES7 decorators. 
    -->
    <TypeScriptExperimentalDecorators>False</TypeScriptExperimentalDecorators>
    <!-- 
    type: boolean, 
    default: false, 
    description: Emit a single file with source maps instead of having a separate file. 
    -->
    <TypeScriptInlineSourceMap>False</TypeScriptInlineSourceMap>
    <!-- 
    type: boolean, 
    default: false, 
    description: Emit the source alongside the sourcemaps within a single file; requires __inlineSourceMap or __sourceMap to be set. 
    -->
    <TypeScriptInlineSources>False</TypeScriptInlineSources>
    <!-- 
    type: string, 
    default: null, 
    description: Specifies the location where debugger should locate map files instead of generated locations. 
                 Use this flag if the .map files will be located at run-time in a different location than than the .js files. 
                 The location specified will be embedded in the sourceMap to direct the debugger where the map files where be loca
    -->
    <TypeScriptMapRoot>
    </TypeScriptMapRoot>
    <!-- 
    type: string, 
    default: (platform specific), 
    description: Use the specified end of line sequence to be used when emitting files: 'crlf' (windows) or 'lf' (unix).” 
    -->
    <TypeScriptNewLine>CRLF</TypeScriptNewLine>
    <!-- 
    type: boolean, 
    default: false, 
    description: Do not generate custom helper functions like __extends in compiled output. 
    -->
    <TypeScriptNoEmitHelpers>True</TypeScriptNoEmitHelpers>
    <!-- 
    type: boolean, 
    default: false, 
    description: Do not emit outputs if any errors were reported. 
    -->
    <TypeScriptNoEmitOnError>True</TypeScriptNoEmitOnError>
    <!-- 
    type: boolean, 
    default: false, 
    description: Raise error on expressions and declarations with an implied ‘any’ type. 
    -->
    <TypeScriptNoImplicitAny>True</TypeScriptNoImplicitAny>
    <!-- 
    type: boolean, 
    default: false, 
    description: Do not include the default library file (lib.d.ts). 
    -->
    <TypeScriptNoLib>
    </TypeScriptNoLib>
    <!-- 
    type: boolean, 
    default: false, 
    description: Do not add triple-slash references or module import targets to the list of compiled files. 
    -->
    <TypeScriptNoResolve>
    </TypeScriptNoResolve>
    <!--
    type: boolean,
    default: alse,
    description: In strict null checking mode, the null and undefined values are not in the domain of every type and are only assignable to themselves and any (the one exception
                 being that undefined is also assignable to void).
    -->
    <TypeScriptStrictNullChecks>False</TypeScriptStrictNullChecks>
    <!-- 
    type: string, 
    default: null, 
    description: Redirect output structure to the directory. 
    -->
    <TypeScriptOutDir>./</TypeScriptOutDir>
    <!-- 
    type: string, 
    default: null, 
    description: Concatenate and emit output to single file. The order of concatenation is determined by the 
                 list of files passed to the compiler on the command line along with triple-slash references 
                 and imports. See output file order documentation for more details. 
    -->
    <TypeScriptOutFile>./TS-Base.js</TypeScriptOutFile>
    <!-- 
    type: boolean, 
    default: false, 
    description: Do not erase const enum declarations in generated code. See const enums documentation for more details. 
    -->
    <TypeScriptPreserveConstEnums>True</TypeScriptPreserveConstEnums>
    <!-- 
    type: boolean, 
    default: false, 
    description: Remove all comments except copy-right header comments beginning with /*! 
    -->
    <TypeScriptRemoveComments>False</TypeScriptRemoveComments>
    <!-- 
    type: string, 
    default: (common root directory is computed from the list of input files), 
    description: Specifies the root directory of input files. Only use to control the output directory structure with __outDir. 
    -->
    <TypeScriptRootDir>
    </TypeScriptRootDir>
    <!-- 
    type: boolean, 
    default: false, 
    description: Unconditionally emit imports for unresolved files. 
    -->
    <TypeScriptIsolatedModules>
    </TypeScriptIsolatedModules>
    <!-- 
    type: string, 
    default: null, 
    description: Specifies the location where debugger should locate TypeScript files instead of source locations. 
                 Use this flag if the sources will be located at run-time in a different location than that at design-time. 
                 The location specified will be embedded in the sourceMap to direct the debugger where the source files where be located. 
    -->
    <TypeScriptSourceMap>True</TypeScriptSourceMap>
    <!-- 
    type: boolean, 
    default: false, 
    description: Generates corresponding ‘.map’ file. 
    -->
    <TypeScriptSourceRoot>
    </TypeScriptSourceRoot>
    <!-- 
    type: boolean, 
    default: false, 
    description: Suppress excess property checks for object literals. 
    -->
    <TypeScriptSuppressImplicitAnyIndexErrors>
    </TypeScriptSuppressImplicitAnyIndexErrors>
    <!-- 
    type: boolean, 
    default: false, 
    description: Suppress excess property checks for object literals. 
    -->
    <TypeScriptSuppressExcessPropertyErrors>
    </TypeScriptSuppressExcessPropertyErrors>
    <!-- 
    type: string, 
    default: "Classic", 
    description: Determine how modules get resolved. Either 'node' for Node.js/io.js style resolution, or 'classic' (default). 
                 See Module Resolution documentation for more details. 
    -->
    <TypeScriptModuleResolution>
    </TypeScriptModuleResolution>
    <!-- 
    type: string, 
    default: "Preserve", 
    description: Support JSX in ‘.tsx’ files: 'React' or 'Preserve'. See JSX. 
    -->
    <TypeScriptJSXEmit>None</TypeScriptJSXEmit>
    <!-- 
    type: string, 
    default: "React", 
    description: Specifies the object invoked for createElement and __spread when targeting ‘react’ JSX emit. 
    -->
    <TypeScriptReactNamespace>
    </TypeScriptReactNamespace>
    <!-- 
    type: boolean, 
    default: false, 
    description: Don’t check a user-defined default lib file’s valitidy. 
    -->
    <TypeScriptSkipDefaultLibCheck>
    </TypeScriptSkipDefaultLibCheck>
    <!-- 
    type: boolean, 
    default: false, 
    description: Do not report errors on unused labels. 
    -->
    <TypeScriptAllowUnusedLabels>
    </TypeScriptAllowUnusedLabels>
    <!-- 
    type: boolean, 
    default: false, 
    description: Raise error on expressions and declarations with an implied ‘any’ type. 
    -->
    <TypeScriptNoImplicitReturns>
    </TypeScriptNoImplicitReturns>
    <!-- 
    type: boolean, 
    default: false, 
    description: Report errors for fallthrough cases in switch statement. 
    -->
    <TypeScriptNoFallthroughCasesInSwitch>
    </TypeScriptNoFallthroughCasesInSwitch>
    <!-- 
    type: boolean, 
    default: false, 
    description: Do not report errors on unreachable code. 
    -->
    <TypeScriptAllowUnreachableCode>
    </TypeScriptAllowUnreachableCode>
    <!-- 
    type: boolean, 
    default: false, 
    description: Disallow inconsistently-cased references to the same file. 
    -->
    <TypeScriptForceConsistentCasingInFileNames>True</TypeScriptForceConsistentCasingInFileNames>
    <!-- 
    type: boolean, 
    default: (module === "system"), 
    description:  Allow default imports from modules with no default export. This does not affect code emit, just typechecking.
    -->
    <TypeScriptAllowSyntheticDefaultImports>
    </TypeScriptAllowSyntheticDefaultImports>
    <!-- 
    type: boolean, 
    default: false, 
    description: Raise error on expressions and declarations with an implied ‘any’ type. 
    -->
    <TypeScriptNoImplicitUseStrict>True</TypeScriptNoImplicitUseStrict>
    <TypeScriptCompileOnSaveEnabled>True</TypeScriptCompileOnSaveEnabled>
    <NoWarn>
    </NoWarn>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!--
  <PropertyGroup Condition="'$(Configuration)' == 'Debug'">
    <TypeScriptRemoveComments>false</TypeScriptRemoveComments>
    <TypeScriptSourceMap>true</TypeScriptSourceMap>
  </PropertyGroup>
  -->
  <PropertyGroup Condition="'$(Configuration)' == 'Release'">
    <TypeScriptRemoveComments>true</TypeScriptRemoveComments>
    <TypeScriptSourceMap>false</TypeScriptSourceMap>
  </PropertyGroup>
  <Import Project="$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)\TypeScript\Microsoft.TypeScript.targets" Condition="Exists('$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)\TypeScript\Microsoft.TypeScript.targets')" />
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
  </PropertyGroup>
  <PropertyGroup>
    <PostBuildEvent>cd $(ProjectDir)
cd ..
@echo ********************************************************************************
@echo STARTING: CleanCopy-Base.cmd
@echo ********************************************************************************
call CleanCopy-Base.cmd
@echo ********************************************************************************
@echo FINISHED: CleanCopy-Base.cmd
@echo ********************************************************************************
@echo ********************************************************************************
@echo STARTING: TypeScript-Base-Doc.cmd
@echo ********************************************************************************
call TypeScript-Base-Doc.cmd
@echo ********************************************************************************
@echo FINISHED: TypeScript-Base-Doc.cmd
@echo ********************************************************************************
@echo ********************************************************************************
@echo STARTING: Copy main.css
@echo ********************************************************************************
cd $(ProjectDir)
cd ..
copy "./main.css" "./TypeScript-Base-Documentation/assets/css" /Y
@echo ********************************************************************************
@echo FINISHED: Copy main.css
@echo ********************************************************************************
cd $(ProjectDir)</PostBuildEvent>
  </PropertyGroup>
</Project>